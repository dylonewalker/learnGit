Tip 1:
初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
    1.使用命令git add <file>（可以反复多次使用，添加多个文件）；
    2.使用命令git commit -m<message>，完成。

Tip 2:
使用命令git status，时刻掌握仓库的当前的状态，告诉我们那个文件被修改了，但还没有准备提交的修改
使用命令git diff，查看对文件做了什么修改

Tip 3：
使用命令git log，显示从最近到最远的提交日志（可以使用--pretty =oneline参数来使的输出信息更简洁）
使用命令git reset --hard HEAD^（在Windows的命令行下^需要加上双引号），回退到上一个版本是HEAD^，
回退到上上一个版本是HEAD^^，回退到往上n个版本是HEAD~n。需要进到最新的某个版本，需要找到这个版本对应的commit id，命令是git reset --hard <commit id>。
使用命令git reflog，用来记录你的每一次命令。

Tip 4:
理解Git的暂存区stage

Tip 5:
使用命令git diff HEAD -- <修改的文件>，查看工作区和暂存区的区别

Tip 6:
使用命令git checkout -- <file>，把文件在工作区的修改全部删掉，让这个文件回到最近一次git commit或git add时的状态。
当使用git add命令将文件送进暂存区后，要修改可以使用命令git reset HEAD <file>把暂存区的修改撤销掉（unstage），重新放回工作区。
当我们使用HEAD时，表示最新的版本。

Tip 7：
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，
你会丢失最近一次提交后你修改的内容。

Tip 8：
建立远程仓库GitHub。本地仓库和GitHub仓库是通过SSH加密的。首先创建SSH keys。打开Git bash，使用ssh-keygen -t -rsa -C"你的邮箱名字"
登录GitHub，在settings里添加SSH秘钥，将id_rsa.pub文件里的内容粘贴过去，即可完成。

Tip 9：
使用命令git remote add origin git@github.com:dylonewalker/learnGit.git,关联在GitHub上的远程仓库，远程库的名字时origin。
使用命令git push -u origin master，将本地仓库里的内容上传至远程库中，由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，
在以后的推送或者拉取时就可以简化命令。此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改。

Tip 10：
从远程库上拉取项目，使用命令git clone git@github.com:dylonewalker/gitSkills.git.
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

Tip 11:
使用命令git checkout -b dev,创建dev分支，然后切换到dev分支。git checkout命令加上-b参数表示创建并切换，
       相当于以下两条命令：git branch dev/git checkout dev
使用命令git branch,查看当前分支，git branch命令会列出所有分支，当前分支前面会标一个*号。
使用命令git branch <分支名>，用于创造一个新的分支
使用命令git checkout <分支名>，用于切换到分支
使用命令git merge <分支名>，用于合并指定分支到当前分支
使用命令git branch -d <分支名>，用于删除不使用的分支。

Tip 12：
当创建了一个分支后，会出现分支和master线同时修改了同一个文件的情况。当我们使用命令git merge <分支>时，会出现confict，
这个时候我们需要修改文件里的冲突后，继续add和commit，才能解决冲突。
使用命令git log --graph --pretty=oneline --abbrev-commit，查看分支合并图
